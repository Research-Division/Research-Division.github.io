/**
 * Sparks Decoration Component
 * Core component for visual enhancements like chart indicators and color palettes
 */

window.sparksDecorationComponent = (function() {
    // Private variables
    let showChartIndicator = true; // Default to showing the indicator
    
    /**
     * Gets a color from the color palette based on index
     * @param {number} index - The index in the palette
     * @return {string} The color value
     */
    function getColorForIndex(index) {
        // Get color directly from the sparksColorUtils module if available
        if (window.sparksColorUtils && window.sparksColorUtils.getChartColor) {
            return window.sparksColorUtils.getChartColor(index);
        }
        
        // If chartUtils is available, try that instead (backward compatibility)
        if (window.chartUtils && window.chartUtils.getChartColor) {
            return window.chartUtils.getChartColor(index);
        }
        
        // Last fallback - a default color if no color utils are available
        console.warn('Color utilities not available, using default color');
        return 'var(--blue1)';
    }
    
    /**
     * Add chart indicator (lightning bolt) with style toggle functionality
     * @param {string} containerId - ID of the container element
     * @param {string} chartType - Type of chart (for tooltip)
     */
    function addChartIndicator(containerId, chartType) {
        if (!showChartIndicator) return;
        
        // Create the indicator container
        const indicator = document.createElement('div');
        indicator.className = 'sparks-chart-indicator';
        indicator.setAttribute('title', `SparksGraphFunction: ${chartType}`);
        
        // Set positioning styles
        indicator.style.position = 'absolute';
        indicator.style.top = '10px';
        indicator.style.right = '10px';
        indicator.style.zIndex = '100';
        indicator.style.display = 'flex';
        indicator.style.alignItems = 'center';
        indicator.style.justifyContent = 'center';
        indicator.style.width = '24px';
        indicator.style.height = '24px';
        indicator.style.cursor = 'pointer';
        
        // Track if we're in chartWiz mode
        let isChartWizMode = false;
        
        // Create the bolt icon (default)
        const bolt = document.createElement('img');
        bolt.src = DataPaths.assets.fontawesome.solidBolt;
        bolt.alt = 'Generated by SparksGraphFunction';
        bolt.style.width = '100%';
        bolt.style.height = '100%';
        bolt.style.transition = 'filter 0.3s ease, transform 0.3s ease';
        bolt.style.filter = 'invert(100%) brightness(100%)'; // For dark theme compatibility
        
        // Create the wizard hat icon (for chartWiz mode)
        const wizardHat = document.createElement('img');
        wizardHat.src = DataPaths.assets.fontawesome.hatWizardSolid;
        wizardHat.alt = 'Chart Wizard Mode';
        wizardHat.style.width = '100%';
        wizardHat.style.height = '100%';
        wizardHat.style.transition = 'filter 0.3s ease, transform 0.3s ease';
        wizardHat.style.filter = 'invert(100%) brightness(100%)'; // For dark theme compatibility
        wizardHat.style.display = 'none'; // Hidden by default
        
        // Add both icons to indicator
        indicator.appendChild(bolt);
        indicator.appendChild(wizardHat);
        
        // Create a tooltip element
        const tooltip = document.createElement('div');
        tooltip.className = 'indicator-tooltip';
        tooltip.textContent = `SparksGraphFunction: ${chartType}`;
        tooltip.style.position = 'absolute';
        tooltip.style.top = 'calc(100% + 5px)';
        tooltip.style.right = '0';
        tooltip.style.backgroundColor = 'var(--gold, #FFC400)';
        tooltip.style.color = 'black';
        tooltip.style.padding = '4px 8px';
        tooltip.style.borderRadius = '4px';
        tooltip.style.fontSize = '12px';
        tooltip.style.whiteSpace = 'nowrap';
        tooltip.style.fontWeight = 'bold';
        tooltip.style.boxShadow = '0 2px 5px rgba(0,0,0,0.2)';
        tooltip.style.opacity = '0';
        tooltip.style.visibility = 'hidden';
        tooltip.style.transition = 'opacity 0.3s ease, visibility 0.3s ease';
        
        // Add tooltip to indicator
        indicator.appendChild(tooltip);
        
        // Helper function to toggle between standard and chartWiz modes
        function toggleChartMode() {
            isChartWizMode = !isChartWizMode;
            
            // Switch the visible icon
            bolt.style.display = isChartWizMode ? 'none' : 'block';
            wizardHat.style.display = isChartWizMode ? 'block' : 'none';
            
            // Update tooltip text and style
            if (isChartWizMode) {
                tooltip.textContent = `Chart Wizard Mode: ${chartType}`;
                tooltip.style.backgroundColor = '#8a2be2'; // Purple for wizard mode
                tooltip.style.color = 'white';
            } else {
                tooltip.textContent = `SparksGraphFunction: ${chartType}`;
                tooltip.style.backgroundColor = 'var(--gold, #FFC400)';
                tooltip.style.color = 'black';
            }
            
            // Toggle chart style via the style manager
            if (window.sparksStyleManager && window.sparksStyleManager.toggleChartWizStyle) {
                window.sparksStyleManager.toggleChartWizStyle(isChartWizMode);
            } else {
                // Fallback to direct event dispatch if style manager is not available
                const event = new CustomEvent('chartWizStyleChanged', {
                    detail: { enabled: isChartWizMode }
                });
                document.dispatchEvent(event);
            }
        }
        
        // Event listeners for hover effects
        indicator.addEventListener('mouseenter', () => {
            // Apply appropriate filter based on current mode
            if (isChartWizMode) {
                // Purple/witchy color for wizard hat
                wizardHat.style.filter = 'invert(35%) sepia(94%) saturate(7431%) hue-rotate(276deg) brightness(83%) contrast(120%)';
            } else {
                // Gold color for lightning bolt
                bolt.style.filter = 'invert(75%) sepia(75%) saturate(1000%) hue-rotate(360deg) brightness(105%) contrast(105%)';
            }
            
            if (!isChartWizMode) {
                // Apply shake animation only to the bolt icon
                bolt.style.transform = 'translateX(-3px)'; // Initial shake
                
                bolt.animate([
                    { transform: 'translateX(-3px)' },
                    { transform: 'translateX(3px)' },
                    { transform: 'translateX(-3px)' },
                    { transform: 'translateX(3px)' },
                    { transform: 'translateX(-2px)' },
                    { transform: 'translateX(2px)' },
                    { transform: 'translateX(0)' }
                ], {
                    duration: 500,
                    iterations: 1
                });
            } else {
                // For wizard hat, apply a subtle glow/pulse animation with purple/witchy color
                wizardHat.animate([
                    { filter: 'invert(35%) sepia(94%) saturate(7431%) hue-rotate(276deg) brightness(83%) contrast(120%)' },
                    { filter: 'invert(35%) sepia(100%) saturate(8000%) hue-rotate(276deg) brightness(100%) contrast(135%)' },
                    { filter: 'invert(35%) sepia(94%) saturate(7431%) hue-rotate(276deg) brightness(83%) contrast(120%)' }
                ], {
                    duration: 800,
                    iterations: 1
                });
            }
            
            // Show tooltip
            tooltip.style.opacity = '1';
            tooltip.style.visibility = 'visible';
            
            // Update tooltip style based on current mode (ensures consistency if mode changed while not hovering)
            if (isChartWizMode) {
                tooltip.style.backgroundColor = '#8a2be2'; // Purple for wizard mode
                tooltip.style.color = 'white';
            } else {
                tooltip.style.backgroundColor = 'var(--gold, #FFC400)';
                tooltip.style.color = 'black';
            }
        });
        
        indicator.addEventListener('mouseleave', () => {
            // Reset filters to default (white) for both icons
            bolt.style.filter = 'invert(100%) brightness(100%)';
            wizardHat.style.filter = 'invert(100%) brightness(100%)';
            
            // Reset any transformations
            bolt.style.transform = 'translateX(0)';
            
            // Hide tooltip
            tooltip.style.opacity = '0';
            tooltip.style.visibility = 'hidden';
        });
        
        // Add click event listener to toggle chart mode
        indicator.addEventListener('click', toggleChartMode);
        
        // Set container position if static
        const containerEl = document.getElementById(containerId);
        if (containerEl) {
            if (window.getComputedStyle(containerEl).position === 'static') {
                containerEl.style.position = 'relative';
            }
            containerEl.appendChild(indicator);
        }
    }
    
    /**
     * Toggle chart indicator visibility
     * @param {boolean} show - Whether to show or hide indicators
     */
    function toggleChartIndicator(show) {
        showChartIndicator = show;
        
        // Update all existing indicators
        const indicators = document.querySelectorAll('.sparks-chart-indicator');
        indicators.forEach(indicator => {
            indicator.style.display = show ? 'flex' : 'none';
        });
    }
    
    // Register with devTools if available
    function registerWithDevTools() {
        if (!window.devTools || !window.devTools.addControlOption) return;
        
        // Add chart indicator toggle
        window.devTools.addControlOption({
            id: 'show-chart-indicator',
            label: 'Indicate Plot Generation',
            type: 'toggle',
            defaultValue: showChartIndicator,
            onChange: (value) => {
                toggleChartIndicator(value);
            }
        });
    }
    
    // Setup event handler
    function initialize() {
        // Register with devTools if available
        if (window.devTools) {
            registerWithDevTools();
        } else {
            // Listen for devTools initialization
            document.addEventListener('devToolsInitialized', registerWithDevTools);
        }
    }
    
    // Public API
    return {
        initialize,
        getColorForIndex,
        addChartIndicator,
        toggleChartIndicator
    };
})();